/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import * as THREE from 'three';

export default function Arrow({ direction, position, speed = 20, onHit }) {
	const group = useRef();
	const { nodes, materials } = useGLTF(
		'https://vazxmixjsiawhamofees.supabase.co/storage/v1/object/public/models/arrow/model.gltf'
	);

	// Store the velocity vector
	const velocity = useRef(direction.clone().normalize().multiplyScalar(speed));

	// Set initial rotation on mount
	useEffect(() => {
		if (group.current && velocity.current.length() > 0) {
			const arrowDirection = velocity.current.clone().normalize();
			// Create a quaternion that rotates from the arrow's default up direction to the travel direction
			const quaternion = new THREE.Quaternion().setFromUnitVectors(
				new THREE.Vector3(0, 1, 0), // Arrow model's default "up" direction
				arrowDirection
			);
			group.current.quaternion.copy(quaternion);
		}
	}, []);

	useFrame((state, delta) => {
		if (group.current) {
			// Move the arrow in the direction of velocity
			group.current.position.x += velocity.current.x * delta;
			group.current.position.y += velocity.current.y * delta;
			group.current.position.z += velocity.current.z * delta;

			// Remove arrow after traveling some distance (optional)
			if (group.current.position.distanceTo(position) > 100) {
				if (onHit) onHit();
			}
		}
	});

	return (
		<group ref={group} position={position} dispose={null}>
			<group rotation={[Math.PI / 0.666, 0, 0]}>
				<mesh geometry={nodes.Cylinder001.geometry} material={materials['Metal.004']} />
				<mesh
					geometry={nodes.Cylinder001_1.geometry}
					material={materials['BrownDark.006']}
				/>
				<mesh geometry={nodes.Cylinder001_2.geometry} material={materials['Blue.003']} />
			</group>
		</group>
	);
}

useGLTF.preload(
	'https://vazxmixjsiawhamofees.supabase.co/storage/v1/object/public/models/arrow/model.gltf'
);
